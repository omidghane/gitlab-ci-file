stages:
  - build
  - merge
  - deploy

 
# Build Docker image for staging (runs on develop)
build-docker-image-staging:
  stage: build
  image: $REGIS_URL/docker:stable
  script:
    - echo "Building Docker image for staging"
    - docker build -t "$REGIS_URL/portal:staging-$CI_COMMIT_SHORT_SHA" .
    - echo "Pushing Docker image"
    - docker push "$REGIS_URL/portal:staging-$CI_COMMIT_SHORT_SHA"
  only:
    - develop 
 
# Build Docker image for production (runs on tags)
build-docker-image:
  stage: build
  image: $REGIS_URL/docker:stable
  script:
    - echo "Building Docker image for production"
    - docker build -t "$REGIS_URL/portal:$CI_COMMIT_TAG" .
    - echo "Pushing Docker image"
    - docker push "$REGIS_URL/portal:$CI_COMMIT_TAG"
  only:
    - tags
 
# Merge develop to main (runs on tags, manually triggered)
merge_to_main:
  stage: merge
  image: $REGIS_URL/alpine:3.18
  before_script:
    - apk add --no-cache git openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_ENCODED" | base64 -d > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
    - ssh-keyscan -H 192.168.3.20 >> ~/.ssh/known_hosts
  script:
    - git config --global user.email "$USER_EMAIL"
    - git config --global user.name "$USER_NAME"
    - git remote set-url origin git@192.168.3.20:django/portal.git
    - git fetch origin --depth=50 || { echo "Git fetch failed"; exit 1; }
    - git checkout main
    # Clean up any existing rebase-merge directory
    - rm -fr .git/rebase-merge || true
    - git pull origin main --rebase || {
        echo "Pull conflict detected. Resolving by preferring develop's changes.";
        git checkout --theirs .gitlab-ci.yml || true;
        git add .gitlab-ci.yml || true;
        GIT_COMMITTER_NAME="$USER_NAME" GIT_COMMITTER_EMAIL="$USER_EMAIL" git commit -m "Resolve rebase conflict in .gitlab-ci.yml by preferring develop's changes" || true;
        git rebase --continue || { echo "Rebase failed after conflict resolution"; git rebase --abort; exit 1; };
      }
    - git merge origin/develop --no-ff -X theirs --allow-unrelated-histories || {
        echo "Merge conflict detected. Resolving by preferring develop's changes.";
        git checkout --theirs . || true;
        git add . || true;
        git commit -m "Resolve merge conflict by preferring develop's changes" || { echo "Commit failed"; exit 1; };
      }
    - git push origin main
  only:
    - tags
  when: manual
  environment:
    name: production

# Deploy to staging (runs on develop)
deploy-staging:
  stage: deploy
  image: $REGIS_URL/docker:stable 
  before_script:
  - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
  - eval $(ssh-agent -s)
  - mkdir -p ~/.ssh
  - echo "$SSH_PRIVATE_KEY_ENCODED" | base64 -d > ~/.ssh/id_rsa
  - chmod 400 ~/.ssh/id_rsa
  script:
    - echo "Deploying to staging"
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -v administrator@192.168.4.15 "
        whoami &&
        cd /home/administrator/Desktop/portal-django/portal &&
        export IMAGE_TAG=staging-$CI_COMMIT_SHORT_SHA &&
        docker compose pull &&
        docker compose up -d --force-recreate && 
        docker ps -a --filter "ancestor=$REGIS_URL/portal" --filter "status=exited" -q | xargs --no-run-if-empty docker rm || true &&
        docker images -q $REGIS_URL/portal | sort -u | xargs -r docker rmi -f || true
        "
  only:
    - develop
  environment:
    name: staging

# Deploy to production (runs on tags)
deploy:
  stage: deploy
  image: $REGIS_URL/docker:stable
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY_ENCODED" | base64 -d > ~/.ssh/id_rsa
    - chmod 400 ~/.ssh/id_rsa
  script:
    - echo "Deploying to production"
    - ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa -v milan@192.168.4.32 "
        whoami &&
        cd /home/milan/Desktop/portal-docker/ &&
        export IMAGE_TAG=$CI_COMMIT_TAG &&
        docker compose pull &&
        docker compose up -d --force-recreate &&
        docker ps -a --filter "ancestor=$REGIS_URL/portal" --filter "status=exited" -q | xargs --no-run-if-empty docker rm || true &&
        docker images -q $REGIS_URL/portal | sort -u | xargs -r docker rmi -f || true
        "
  only:
    - tags
  needs:
    - job: merge_to_main
      optional: false
  environment:
    name: production